<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="16" errors="0" failures="2" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2017-10-15" time="11:24:55">
  <environment machine-name="" nunit-version="2.5.8.0" os-version="0.0.0.0" user-domain="" clr-version="" cwd="/data" platform="Unknown" user="" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Failure" success="False" time="3.1239" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="./NuGetMetadata.Tests.ps1" executed="True" result="Failure" success="False" time="3.1239" asserts="0" description="./NuGetMetadata.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Get-NupkgMetadata" executed="True" result="Success" success="True" time="1.6376" asserts="0" description="Get-NupkgMetadata">
            <results>
              <test-suite type="TestFixture" name="Given no path (null/empty string)" executed="True" result="Success" success="True" time="0.8808" asserts="0" description="Given no path (null/empty string)">
                <results>
                  <test-case description="It throws non-terminating exception" name="Get-NupkgMetadata.Given no path (null/empty string).It throws non-terminating exception" time="0.8808" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Given different types of paths" executed="True" result="Success" success="True" time="0.2927" asserts="0" description="Given different types of paths">
                <results>
                  <test-case description="works with absolute paths" name="Get-NupkgMetadata.Given different types of paths.works with absolute paths" time="0.271" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="works with relative paths" name="Get-NupkgMetadata.Given different types of paths.works with relative paths" time="0.0217" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Given non-existent file path" executed="True" result="Success" success="True" time="0.1267" asserts="0" description="Given non-existent file path">
                <results>
                  <test-case description="Has errors" name="Get-NupkgMetadata.Given non-existent file path.Has errors" time="0.1267" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Given example file path" executed="True" result="Success" success="True" time="0.3375" asserts="0" description="Given example file path">
                <results>
                  <test-case description="Reads the content of the file" name="Get-NupkgMetadata.Given example file path.Reads the content of the file" time="0.3375" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ZipFileEntry" executed="True" result="Success" success="True" time="0.3637" asserts="0" description="Get-ZipFileEntry">
            <results>
              <test-suite type="TestFixture" name="Given a directory path" executed="True" result="Success" success="True" time="0.1532" asserts="0" description="Given a directory path">
                <results>
                  <test-case description="Has errors" name="Get-ZipFileEntry.Given a directory path.Has errors" time="0.1532" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Given example zip file with some files" executed="True" result="Success" success="True" time="0.1412" asserts="0" description="Given example zip file with some files">
                <results>
                  <test-case description="Return a non-empty collection" name="Get-ZipFileEntry.Given example zip file with some files.Return a non-empty collection" time="0.0831" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Return a ZipArchiveEntry" name="Get-ZipFileEntry.Given example zip file with some files.Return a ZipArchiveEntry" time="0.058" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Given a non zip file" executed="True" result="Success" success="True" time="0.0693" asserts="0" description="Given a non zip file">
                <results>
                  <test-case description="Has errors" name="Get-ZipFileEntry.Given a non zip file.Has errors" time="0.0693" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-ZipFileEntryContent" executed="True" result="Success" success="True" time="0.3172" asserts="0" description="Get-ZipFileEntryContent">
            <results>
              <test-suite type="TestFixture" name="Given no zip file entry (null)" executed="True" result="Success" success="True" time="0.1286" asserts="0" description="Given no zip file entry (null)">
                <results>
                  <test-case description="Returns null" name="Get-ZipFileEntryContent.Given no zip file entry (null).Returns null" time="0.1286" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Given a zip file entry" executed="True" result="Success" success="True" time="0.101" asserts="0" description="Given a zip file entry">
                <results>
                  <test-case description="Should not throw" name="Get-ZipFileEntryContent.Given a zip file entry.Should not throw" time="0.0709" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Gets the contents of the file" name="Get-ZipFileEntryContent.Given a zip file entry.Gets the contents of the file" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When file couldn't be opened" executed="True" result="Success" success="True" time="0.0876" asserts="0" description="When file couldn't be opened">
                <results>
                  <test-case description="Should have errors" name="Get-ZipFileEntryContent.When file couldn't be opened.Should have errors" time="0.0876" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-NuGetMetadata" executed="True" result="Failure" success="False" time="0.8054" asserts="0" description="Get-NuGetMetadata">
            <results>
              <test-suite type="TestFixture" name="Given no parameters" executed="True" result="Failure" success="False" time="0.4558" asserts="0" description="Given no parameters">
                <results>
                  <test-case description="Finds metadata in project file of current directory" name="Get-NuGetMetadata.Given no parameters.Finds metadata in project file of current directory" time="0.4558" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {xunit}
But was:  {}</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /data/NuGetMetadata.Tests.ps1: line 113
113:             $result.id | Should be "xunit"            </stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Given a directory" executed="True" result="Failure" success="False" time="0.2308" asserts="0" description="Given a directory">
                <results>
                  <test-case description="Finds metadata in project file of given directory" name="Get-NuGetMetadata.Given a directory.Finds metadata in project file of given directory" time="0.2308" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {xunit}
But was:  {}</message>
                      <stack-trace>at &lt;ScriptBlock&gt;, /data/NuGetMetadata.Tests.ps1: line 124
124:             $result.id | Should be "xunit"</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Given both directory and config file parameters" executed="True" result="Success" success="True" time="0.1188" asserts="0" description="Given both directory and config file parameters">
                <results>
                  <test-case description="Throws an exception because they are mutually exclusive" name="Get-NuGetMetadata.Given both directory and config file parameters.Throws an exception because they are mutually exclusive" time="0.1188" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>